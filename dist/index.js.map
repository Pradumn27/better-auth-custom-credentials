{"version":3,"sources":["../src/cookies.ts","../src/server.ts","../src/client.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["export type CookieAttrs = {\n  httpOnly?: boolean;\n  secure?: boolean;\n  sameSite?: 'lax' | 'strict' | 'none';\n  path?: string;\n  domain?: string;\n  maxAge?: number;\n  expires?: Date;\n};\n\nexport function serializeCookie(\n  name: string,\n  value: string,\n  attrs: CookieAttrs = {}\n): string {\n  const parts = [`${name}=${encodeURIComponent(value)}`];\n\n  if (attrs.maxAge != null) parts.push(`Max-Age=${Math.floor(attrs.maxAge)}`);\n  if (attrs.expires) parts.push(`Expires=${attrs.expires.toUTCString()}`);\n  if (attrs.domain) parts.push(`Domain=${attrs.domain}`);\n  parts.push(`Path=${attrs.path ?? '/'}`);\n\n  if (attrs.secure) parts.push('Secure');\n  if (attrs.httpOnly) parts.push('HttpOnly');\n\n  if (attrs.sameSite) {\n    parts.push(\n      attrs.sameSite === 'lax'\n        ? 'SameSite=Lax'\n        : attrs.sameSite === 'strict'\n        ? 'SameSite=Strict'\n        : 'SameSite=None'\n    );\n  }\n\n  return parts.join('; ');\n}\n","import type { BetterAuthPlugin } from 'better-auth';\nimport { createAuthEndpoint, APIError } from 'better-auth/api';\nimport { z } from 'zod';\nimport { serializeCookie } from './cookies';\n\nexport type VerifyResult =\n  | {\n      ok: true;\n      user: { email: string; name?: string | null; id?: string | number };\n      // optionally anything else from your backend\n      meta?: Record<string, unknown>;\n    }\n  | { ok: false; reason?: string; code?: string };\n\nexport type VerifyFn = (args: {\n  input: Record<string, unknown>;\n  req: Request;\n}) => Promise<VerifyResult>;\n\nexport type CredentialsPluginOptions = {\n  /**\n   * POST path for credentials sign-in\n   * Use a unique, namespaced path to avoid conflicts with other plugins\n   */\n  path?: string; // default: \"/credentials/sign-in\"\n  /**\n   * Zod schema for request body (customize your fields)\n   * Default is { email, password, rememberMe? }\n   */\n  inputSchema?: z.ZodTypeAny;\n  /**\n   * Your verification callback. Do whatever you want here (call Rails, LDAP, etc).\n   * Returns { ok: true, user } to sign in, or { ok: false } to reject.\n   */\n  verify: VerifyFn;\n  /**\n   * If true, automatically create the user if not found\n   * Default: true\n   */\n  autoSignUp?: boolean;\n  /**\n   * Compute extra session data stored in the session row (JSONB)\n   * Example: attach a Rails JWT\n   */\n  onSessionData?: (args: {\n    verified: Extract<VerifyResult, { ok: true }>;\n    userRecord: { id: string | number; email: string };\n    req: Request;\n  }) =>\n    | Promise<Record<string, unknown> | undefined>\n    | Record<string, unknown>\n    | undefined;\n  /**\n   * Override session expiry in seconds (by default uses Better Auth config `session.expiresIn`)\n   */\n  sessionExpiresIn?: number;\n};\n\nconst defaultSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n  rememberMe: z.boolean().optional(),\n});\n\nexport function credentialsPlugin(\n  opts: CredentialsPluginOptions\n): BetterAuthPlugin {\n  const path = opts.path ?? '/credentials/sign-in';\n  const inputSchema = opts.inputSchema ?? defaultSchema;\n  const autoSignUp = opts.autoSignUp ?? true;\n\n  return {\n    id: 'credentials',\n    endpoints: {\n      signIn: createAuthEndpoint(path, { method: 'POST' }, async (ctx) => {\n        const req = ctx.request;\n\n        if (!req)\n          throw new APIError('INTERNAL_SERVER_ERROR', {\n            message: 'INTERNAL_SERVER_ERROR',\n          });\n\n        const { adapter, internalAdapter, createAuthCookie, session, logger } =\n          ctx.context;\n\n        let body: unknown = {};\n        try {\n          body = await req.json();\n        } catch {\n          // ignore\n        }\n\n        const parsed = inputSchema.safeParse(body);\n        if (!parsed.success) {\n          throw new APIError('BAD_REQUEST', {\n            message: 'INVALID_INPUT',\n            cause: parsed.error.flatten(),\n          });\n        }\n\n        const input = parsed.data as Record<string, unknown>;\n        const verifyRes = await opts.verify({ input, req });\n\n        if (!verifyRes.ok) {\n          throw new APIError('UNAUTHORIZED', {\n            message: verifyRes.reason ?? 'INVALID_CREDENTIALS',\n            code: verifyRes.code ?? 'INVALID_CREDENTIALS',\n          });\n        }\n\n        const email = verifyRes.user.email;\n        if (!email) {\n          throw new APIError('BAD_REQUEST', {\n            message: 'Verifier must return user.email',\n          });\n        }\n\n        // 1) Find or create user using Better Auth adapter/internalAdapter\n        // Prefer internalAdapter to keep compatibility with BA internals\n        let user = await (internalAdapter as any).getUserByEmail?.(email);\n\n        if (!user && !autoSignUp) {\n          throw new APIError('UNAUTHORIZED', {\n            message: 'USER_NOT_FOUND',\n          });\n        }\n\n        if (!user) {\n          try {\n            user = await (internalAdapter as any).createUser?.({\n              email,\n              name:\n                (verifyRes.user.name as string | null | undefined) ??\n                email.split('@')[0],\n              image: null,\n              emailVerified: true,\n            });\n          } catch (e) {\n            logger?.error?.('credentials:createUser_failed', e as any);\n            throw new APIError('INTERNAL_SERVER_ERROR', {\n              message: 'FAILED_TO_CREATE_USER',\n            });\n          }\n        }\n\n        if (!user) {\n          throw new APIError('INTERNAL_SERVER_ERROR', {\n            message: 'USER_CREATION_FAILED',\n          });\n        }\n\n        // 2) Create a session via internalAdapter\n        const now = Date.now();\n        // Determine expiry in seconds. If not provided, default to 7 days.\n        const defaultExpSec = opts.sessionExpiresIn ?? 60 * 60 * 24 * 7;\n        // rememberMe (if present) can extend expiry, customize as you like\n        const remember = (input as any).rememberMe === true;\n        const expiresInSec = remember ? defaultExpSec : defaultExpSec; // adjust if you want shorter non-remember sessions\n        const expiresAt = new Date(now + expiresInSec * 1000);\n\n        let sessionData: Record<string, unknown> | undefined = undefined;\n        if (opts.onSessionData) {\n          sessionData = await opts.onSessionData({\n            verified: verifyRes,\n            userRecord: { id: user.id, email: user.email },\n            req,\n          });\n        }\n\n        const ip =\n          req.headers.get('x-forwarded-for') ??\n          req.headers.get('cf-connecting-ip') ??\n          null;\n        const ua = req.headers.get('user-agent') ?? null;\n\n        const created = await (internalAdapter as any).createSession?.(\n          user.id,\n          {\n            expiresAt,\n            ipAddress: ip,\n            userAgent: ua,\n            data: sessionData,\n          } as any\n        );\n\n        if (!created) {\n          throw new APIError('INTERNAL_SERVER_ERROR', {\n            message: 'FAILED_TO_CREATE_SESSION',\n          });\n        }\n\n        // 3) Set the session cookie header\n        // Use Better Auth cookie config (prefix, secure, samesite, etc.)\n        const cookieCfg = createAuthCookie('session_token');\n        const cookie = serializeCookie(cookieCfg.name, created.token, {\n          ...cookieCfg.attributes,\n          // keep in sync with session expiration\n          maxAge: expiresInSec,\n          expires: expiresAt,\n          sameSite: 'lax',\n        });\n\n        return ctx.json(\n          {\n            ok: true,\n            userId: user.id,\n          },\n          { status: 200, headers: { 'Set-Cookie': cookie } as any }\n        );\n      }),\n    },\n  };\n}\n","export type CredentialsClientOptions = {\n  path?: string; // must match server plugin path (default: \"/credentials/sign-in\")\n};\n\ntype HasFetch = { fetch: (path: string, init?: RequestInit) => Promise<Response> };\n\nexport function extendAuthClientWithCredentials<T extends HasFetch & Record<string, any>>(\n  client: T,\n  opts: CredentialsClientOptions = {}\n): T {\n  const path = opts.path ?? '/credentials/sign-in';\n\n  const signIn = (client as any).signIn ?? {};\n  (client as any).signIn = signIn;\n  signIn.credentials = async (\n    body: Record<string, unknown>,\n    init?: RequestInit\n  ) => {\n    const res = await client.fetch(path, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body),\n      ...init,\n    });\n\n    if (!res.ok) {\n      let msg = 'Invalid credentials';\n      try {\n        const j = await res.json();\n        msg = (j as any)?.error ?? msg;\n      } catch {\n        // ignore\n      }\n      throw new Error(msg);\n    }\n\n    return res.json().catch(() => ({}));\n  };\n\n  return client;\n}\n\nexport async function signInWithCredentials(\n  endpoint: string,\n  body: Record<string, unknown>,\n  init?: RequestInit\n) {\n  const res = await fetch(endpoint, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(body),\n    ...init,\n  });\n  if (!res.ok) {\n    let msg = 'Invalid credentials';\n    try {\n      const j = await res.json();\n      msg = (j as any)?.error ?? msg;\n    } catch {\n      // ignore\n    }\n    throw new Error(msg);\n  }\n  return res.json().catch(() => ({}));\n}\n"]}